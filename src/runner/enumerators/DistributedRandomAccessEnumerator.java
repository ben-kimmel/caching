package runner.enumerators;

import java.util.Enumeration;
import java.util.PrimitiveIterator;
import java.util.Random;

/**
 * Generates well distributed random block IDs for requests.
 * 
 * @author Ben Kimmel
 *
 */
public class DistributedRandomAccessEnumerator implements Enumeration<Integer> {

	private PrimitiveIterator.OfInt r;

	/**
	 * Constructs a new DistributedRandomAccessEnumerator.
	 */
	public DistributedRandomAccessEnumerator() {
		this.r = new Random().ints(Integer.MIN_VALUE, Integer.MAX_VALUE).iterator();
	}

	/**
	 * Constructs a new DistributedRandomAccessEnumerator with the given lower
	 * and upper bounds.
	 * 
	 * @param min
	 *            The minimum value to be generated by the
	 *            DistributedRandomAccessEnumerator. This number will be
	 *            included in the enumeration
	 * @param max
	 *            The maximum value to be generated by the
	 *            DistributedRandomAccessEnumerator. This number will not be
	 *            included in the enumeration
	 */
	public DistributedRandomAccessEnumerator(int min, int max) {
		this.r = new Random().ints(min, max).iterator();
	}

	@Override
	public boolean hasMoreElements() {
		return true;
	}

	@Override
	public Integer nextElement() {
		return this.r.next();
	}

	@Override
	public String toString() {
		return "DistributedRandom";
	}

}
